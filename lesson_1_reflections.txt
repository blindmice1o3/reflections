// Command Prompt (windows): "FC game_old.js game_new.js"
"FC" => file compare

// Git Bash (unix/mac [maybe linux]): "diff -u game_old.js game_new.js"
"diff -u" => the equivalent to Command Prompt's FC
    "-u" => add-on (optional flag) that makes it easier to view, can use without -u

// navigate to the directory where the code is saved then use command: 
    "git log" => will give you every commit that's ever been made
        starting with the most recent (will have id, author, date, message)

    // "git diff [commit id 1] [commit id 2]": compare commits
    "git diff" => check what changes a commit introduced; 
        it's similar to the "FC" and "diff -u" commands we saw earlier, but instead
        of just comparing two files, it compares two versions of a file within git

    "git log --stat" => the "--stat" modifier will give us some 
        statistics about which files have changed in each commit

    "git checkout [address of older commits]" => revert to older version of the file(s)

    "q" => stop viewing the git log output

    "git clone [url]" => creates a clone of the repository 
        (not just a copy of most recent files, but the entire history [all versions])

    "~" => home directory 
    
    "cd ~" => change directory to home directory

    "mv" => move file 
        (the first argument is the file name, second argument is new 
        name for that file, and leaving no third argument will move it 
        to the present working directory)


Q. How did viewing a diff between two versions of a file help you spot the bug?
A. It isolated the lines of code that changed (rather than having to compare thousands of lines of code if we were comparing a big program). This allows us to focus on what the user changed, which helped us to find the typo much quicker than manually searching (alt-tabing between the old file and new file).

Q. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A. Changes to a file made a long time ago will be difficult to remember. By having easy access to the entire history of a file, programmers can quickly revisit older versions of the file to (1) refresh their memory on what past versions were like as well as (2) compare the differences and changes that have been made over time. 

Examples of version control history used in real-world applications are:
dropbox, google docs, wikipedia(, and also manually saving different versions of a file with different names)

Q. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
A. Pros: having control of logical save points (whole/complete concept)
Cons: possibility of forgetting to commit (save)

Q. Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
A. The version control systems were designed for different purposes. Google Docs commits each file separately because its intended purpose is for generalize cloud storage. Git's intended purpose is more specialized, its commits of multiple files was designed to keep track of changes for whole programs (which can be made up of multiple files), meaning that in order for its commit to save more logical chunks (changes to whole concept)... it'll need to track changes made to multiple files.

Q. How can you use the commands git log and git diff to view the history of files?
A. Using the "git log" command, I can see the history of commits made (and its associated commit-message [a short description of the changes made by that commit]). Using the "git diff" command, I can enter the commit id of the older version, then a space, and then the commit id of the more recent version... to see the differences/changes of the two commits (counting green lines for line-added, and counting red lines for line-deleted).

Q. How might using version control make you more confident to make changes that could break something?
A. Using a version control system will allow me easy access to previous versions of my application. So if a bug was introduced in a more recent version, I can always revert back to a previous version without the bug. This will allow me to find the bug, as well as examine the lines of code that are different between the two versions (helping me to narrow the search for where the bug was introduced).

Q. Now that you have your workspace set up, what do you want to try using Git for?
A. I'd like to use Git to keep track of different versions of application files that I write, saving the different versions of the files as different commits, this will organize my project. The repository for my project will be made of different commits (or different saved-state versions of my projects).








